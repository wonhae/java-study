package chap03.binary.bitwise;

public class Bitwise {
	public static void main(String[] args) {
		// &, |, ^ (이항연산자 중)/ ~(단항 비트 바꿔주는 연산자)
		// >>, <<, >>> 
		
		// & (둘다 1일 경우만1, 나머지는 0)
		int a = 45; 	// 0010 1101
		int b = 25; 	// 0001 1001
		//c는 뭘까&연산 // 0000 1001
		int c = a & b;  // c는 9
		System.out.println(c);
		
		// | (or) (둘다 0일 경우만 0, 나머지는 모두 1)
		c = a | b; // 61
		//c는 뭘까|연산 // 0011 1101
		System.out.println(c);
		
		// ^ (exclusive or)  (둘이 다르면 1, 같으면 0)
		c = a ^ b; // 52
		//c는 뭘까^연산 // 0011 0100
		
		// ~ (비트를 반대로 변경해주는 단항연산자) 
		c = ~a;  // ~0010 1101  // -46
				 
		
		// << (모든 비트를 왼쪽으로 몇 칸씩 이동)(<<한번 할때 마다 * 2한 결과)
		//    ( 채우는 비트가 부호비트)
		a = 1;  	// a는 4 byte로 1이 저장되어있음 // 0000~00001
		c = a << 1; // 000~00010 //2// 하나 밀려나고 앞에것 삭제(32bit)
		System.out.println(c);
		
		c = a << 3; 	// 0~001000 // 8
		
		a = -8; 		// 1111~1,111,000
		c = a << 3;		// 1~1,000,000 //-64   
		System.out.println(c);  
		
		// >> (모든 비트를 오른쪽으로 몇 칸씩 이동) (2로 나눈 결과)  
		//    ( 채우는 비트가 부호비트)
		a = 16; 		// 00~00010000
		c = a >> 1;		//  00~0001000,0  공간 안남는것 삭제,채우기 00~0001000 = 8
		System.out.println(c);
		
		c = a >> 3;
		System.out.println();  // 2
		
		// >>> (모든 비트를 오른쪽으로 몇 칸씩 이동)(채우는 비트가 0)
		a = -8;
		c = a >>> 1;
		System.out.println(c); //양수가 된다. 첫자리 0이되니까. 2,147,483,644
		
		
		
		
		
	}
}
